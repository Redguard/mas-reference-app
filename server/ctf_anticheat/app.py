from flask import Flask, request, Blueprint, session
from uuid import uuid4
import base64
import hmac
import hashlib
import logging
import random
from coincurve import PrivateKey
import json
import time

with open("/app/signature_keys/pkcs8_private_key.pem", "r") as pem_file:
    pem_data = pem_file.read()
private_key = PrivateKey.from_pem(pem_data.encode())

logging.basicConfig(level=logging.INFO)
api_v1 = Blueprint("api", __name__, url_prefix = "/8dj21k01sx/api/v1")

# this directory contains the in memory state
# key: session id generated by client
# value: timestamp generated by
in_memory_state = {}


@api_v1.route("/getCardDeck", methods = ["POST"])
def getCardDeck():
    
    logging.info("getCardDeck called")

    # Expected body:
    # {
    #   "session": "..."
    # }
    data = request.get_json()
    if not data:
        return "ü•∏", 403

    # store the deck for future validation
    in_memory_state[data['session']] = time.time()

    # Return value:
    # {
    #   payload = {
    #     "session": "...",
    #     "token": "..."
    #    },
    #   "signature": "..."
    # }

    payload = {
        "session": data['session'],
        "timestamp": in_memory_state[data['session']]
    }
    payload_json = json.dumps(payload, separators=(',', ':'))
    signature = private_key.sign(payload_json.encode('utf-8'))
    response = {
            "payload": payload,
            "signature": signature.hex()
        }
    logging.info("response is: " + str(response))

    return json.dumps(response), 200


@api_v1.route("/validateDeck", methods = ["POST"])
def validateDeck():

    # Expected body:
    # {
    #   "deck": "...",
    #   "token": "..."
    # }
    data = request.get_json()
    if not data:
        return "ü•∏", 403
    
    # Return value:
    # {
    #   payload = {
    #     "valid": "OK/NOK",
    #     "token": "..."
    #    },
    #   "signature": "..."
    # }

    return "Thank you for the useful feedback!"

app = Flask(__name__)
app.register_blueprint(api_v1)

@app.route('/', defaults={'path': ''}, methods=['GET', 'POST', 'OPTIONS'])
@app.route('/<path:path>', methods=['GET', 'POST', 'OPTIONS'])
def catch_all(path):
    return "üò∂‚Äçüå´Ô∏è", 404

